// std/collections.cnt
// Standard library Collections module
// This file declares public interfaces for common data structures.

// NOTE: The current CNT compiler design outlined so far does NOT include
// explicit generic support (<T> syntax). The declarations below use generic
// syntax to illustrate the *intended* API for a language with generics.
// You will need to implement generic support in your compiler to compile code
// that uses these definitions.

// Import necessary types from other standard library modules.
// Assuming Option<T> is defined in std::core or std::option.
// Let's assume it's in std::core for now.
import std::core; // Imports items from std::core, including core::Option

// --- Vector (Dynamic Array) ---

// A growable array type that owns its elements.
// T represents the type of elements stored in the vector.
// [Intended API - requires compiler support for generics]
pub struct Vec<T>; // Placeholder struct definition for the type

// Implementation block for Vec<T> methods.
// This syntax assumes the compiler supports 'impl' blocks for types.
// Alternatively, these could be standalone functions that take Vec as the first argument.
// [Intended API - requires compiler support for impl blocks or standalone functions]
 impl Vec<T> { // Example syntax for an implementation block

    // Creates a new, empty vector.
    // [Intended API - requires compiler support for generics]
    pub fn new() -> Vec<T>;

    // Appends an element to the end of the vector.
    // Takes ownership of the `value` (moves T into the vector).
    // Requires a mutable reference to the vector (`&mut self`).
    // [Intended API - requires compiler support for methods and generics]
     pub fn push(&mut self, value: T) -> void;
    // Alternative standalone function style:
    pub fn vec_push(vec: &mut Vec<T>, value: T) -> void;


    // Removes the last element from the vector and returns it.
    // Returns `core::Option<T::owned>` because the vector might be empty,
    // and the element's ownership is transferred out.
    // Requires a mutable reference to the vector.
    // [Intended API - requires compiler support for methods, generics, and Option type]
     pub fn pop(&mut self) -> core::Option<T::owned>; // T::owned might be needed if T was borrowed
    // Alternative standalone function style:
    pub fn vec_pop(vec: &mut Vec<T>) -> core::Option<T>; // Simplified, assuming T is always owned value

    // Returns an immutable reference to the element at the given index.
    // Returns `core::Option<&T>` because the index might be out of bounds.
    // Requires an immutable reference to the vector (`&self`).
    // [Intended API - requires compiler support for methods, generics, and Option type]
     pub fn get(&self, index: int) -> core::Option<&T>;
    // Alternative standalone function style:
    pub fn vec_get(vec: &Vec<T>, index: int) -> core::Option<&T>;

    // Returns a mutable reference to the element at the given index.
    // Returns `core::Option<&mut T>` because the index might be out of bounds.
    // Requires a mutable reference to the vector (`&mut self`).
    // [Intended API - requires compiler support for methods, generics, and Option type]
     pub fn get_mut(&mut self, index: int) -> core::Option<&mut T>;
    // Alternative standalone function style:
    pub fn vec_get_mut(vec: &mut Vec<T>, index: int) -> core::Option<&mut T>;


    // Returns the number of elements in the vector.
    // Requires an immutable reference to the vector.
    // [Intended API - requires compiler support for methods]
     pub fn len(&self) -> int;
    // Alternative standalone function style:
    pub fn vec_len(vec: &Vec<T>) -> int;

    // Returns true if the vector contains no elements.
    // Requires an immutable reference to the vector.
    // [Intended API - requires compiler support for methods]
     pub fn is_empty(&self) -> bool;
    // Alternative standalone function style:
    pub fn vec_is_empty(vec: &Vec<T>) -> bool;

    // Note: Indexing syntax `vec[index]` would typically require
    // implementing Index/IndexMut traits, which are not yet defined.

    // The vector type itself should manage the memory for its elements.
    // When a Vec goes out of scope, it should drop its elements and then free its internal buffer.
    // This relies on the compiler's Drop handling for Vec (if it requires Drop).

// } // Example impl block closing


// --- Other Collections (Placeholder Declarations) ---

// A map from keys of type K to values of type V.
// Requires keys K to be Hashable and Comparable (traits).
// [Intended API - requires compiler support for generics and traits]
 pub struct Map<K, V>;
 impl Map<K, V> {
     pub fn new() -> Map<K, V>;
     pub fn insert(map: &mut Map<K, V>, key: K, value: V) -> core::Option<V>; // Returns old value if key existed
     pub fn get(map: &Map<K, V>, key: &K) -> core::Option<&V>;
     pub fn remove(map: &mut Map<K, V>, key: &K) -> core::Option<V>;
// //     // ... other methods
 }


// A set of elements of type T.
// Requires elements T to be Hashable and Comparable (traits).
// [Intended API - requires compiler support for generics and traits]
 pub struct Set<T>;
 impl Set<T> {
     pub fn new() -> Set<T>;
     pub fn insert(set: &mut Set<T>, value: T) -> bool; // Returns true if value was new
     pub fn contains(set: &Set<T>, value: &T) -> bool;
// //     // ... other methods
 }


// Note on Ownership and Collections:
// - Collection types like Vec, Map, Set typically *own* the elements they contain.
// - Adding elements (e.g., `push`, `insert`) usually involves moving the element into the collection.
// - Removing elements (e.g., `pop`, `remove`) usually involves moving the element *out* of the collection.
// - Accessing elements by index (`get`, `get_mut`) or key (`get`) returns references (`&T`, `&mut T`), respecting borrowing rules.
// - Passing a collection instance by value moves the entire collection and its contents.
// - Passing a collection instance by reference (`&Collection`, `&mut Collection`) allows temporary access without moving the collection itself.
// - When a collection instance goes out of scope or is moved/dropped, it drops all its elements in turn.