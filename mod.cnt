// std/mod.cnt
// The root module for the standard library (std).
// This file declares the public sub-modules contained within the 'std' directory.
// When other CNT code imports 'std', the compiler will look at this file
// to discover the available public items and sub-modules under 'std::'.

// --- Declare Public Sub-Modules ---
// These declarations tell the compiler that the corresponding files or directories
// (e.g., 'core.cnt', 'io.cnt', 'collections.cnt', or subdirectories named 'core', 'io', etc.)
// are part of the 'std' module and should be made publicly accessible under the 'std::' path.

// Declare the 'core' sub-module.
// This module contains fundamental types, traits, and concepts.
pub mod core;

// Declare the 'io' sub-module.
// This module provides input/output operations.
pub mod io;

// Declare the 'collections' sub-module.
// This module provides common data structures like Vec, Map, etc.
pub mod collections;

// Declare the 'math' sub-module.
// This module provides mathematical functions and constants.
pub mod math;

// Declare the 'fs' sub-module.
// This module provides file system operations.
pub mod fs;

// Declare the 'thread' sub-module.
// This module provides threading facilities.
pub mod thread;

// Declare the 'time' sub-module.
// This module provides types and functions for time and durations.
pub mod time;

// --- Optional: Re-exports ---
// You could re-export commonly used items from sub-modules here
// so they can be accessed directly via `std::Item` after `import std;`.
// This requires compiler support for `pub use` syntax.

// Example Re-exports (requires compiler support for `pub use`):
 pub use core::Result;   // Now you can use `std::Result` after `import std;`
 pub use core::Option;   // Now you can use `std::Option` after `import std;`
 pub use io::println;    // Now you can use `std::println` after `import std;`
 pub use collections::Vec; // Now you can use `std::Vec` after `import std;`


// Note: The 'std' module itself typically contains very few, if any,
// top-level items. Its primary role is to organize and expose its children (sub-modules).
// The declaration `pub mod name;` in this file corresponds to either a file named `name.cnt`
// or a directory named `name` containing a `mod.cnt` file (e.g., `name/mod.cnt`).
// Based on the files you've created (`core.cnt`, `io.cnt`, etc.), the compiler
// should be configured to recognize `pub mod name;` as referring to `name.cnt`
// when `name` is a top-level module declared in `std/mod.cnt`.